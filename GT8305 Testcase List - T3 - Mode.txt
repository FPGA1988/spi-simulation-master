#---------------------------------------------GT5238 Testcase List:『Mode』-----------------------------------------------

#_________________________________________________________________________________________________________________________
{ 0 模式设计概览
0.1 统计：
    testcase总数 = PATRA + PARTB + PARTC = 
{0.2 GT8305的模式/工作状态 : 
    0.2.1 fault标记处于寄存器 0x2的 :
        SNS_A_OCP
        SNS_B_OCP
        SNS_C_OCP
        VDS_LC
        VDS_HC
        VDS_LB
        VDS_HB
        VDS_HA
        VDS_LA
    0.2.2 fault标记处于寄存器 0x3 的 :
        VCPH_OVLO_ABS
        VCPH_OVLO
        VCPH_UVLO
        VCP_LSD_UVLO
        AVDD_UVLO
        VREG_UV
        OTSD
        PVDD_UVLO2
    0.2.3 fault标记处于寄存器 0x4 的 :
        VGS_LC
        VGS_HC
        VGS_HB
        VGS_LB
        VGS_HA
        VGS_LA
    上述的fault类错误都可以用同样的方式来进行设置、清除等
    0.2.4 其他fault类错误
        WATCH_DOG
}
{0.3  
    0.3.1 fault的使能/禁止设置处于寄存器0x9的 :
        ___________________________________________________________________
        名称                     位       默认          补充
        DISABLE_OTSD            BIT10    DISABLE        默认禁止此fault，并且其他的0都代表使能，而这里0代表禁止
        DISABLE_PVDD_UVLO2      BIT9     ENABLE
        DISABLE_GRDV_FAULT      BIT8     ENABLE
        DISABLE_SNS_CLAMP       BIT7     ENABLE
        DISABLE_SNS_OCP         BIT4     ENABLE
        DISABLE_SNS_WD          BIT3     DISABLE        默认禁止此fault，并且其他的0都代表使能，而这里0代表禁止
        ___________________________________________________________________
        
        
    0.3.2 fault的使能/禁止设置处于寄存器0xb的 :
        ___________________________________________________________________
        名称                     位       默认          补充
        DISABLE_VREG_PWRGD      BIT10    ENABLE   
        ___________________________________________________________________    
        
    0.3.3 fault的使能/禁止设置处于寄存器0xc的 :    
        #___________________________________________________________________
        名称                     位       默认          补充
        DISABLE_VDS_OCP         BIT2-BIT0 ENABLE        VDS_OCP有三种模式:DISABLE,REPORT和SHUTDOWN，仅当 2:0 = 010 的时候
                                                        处于DISABLE模式
        #___________________________________________________________________   
		#补充@2017.03.28 : 关于VDS OCP的测试，后面需要再详细测试下GT8305芯片的对应功能，目前测试出来和datasheet不一致[没有report only模式]
}    
{0.4 
    0.4.1 warning标记处于寄存器 0x1的 :
		D7	:	PVDD_UVFL
		D6	:	PVDD_OVFL
		D4	:	VCHP_UVFL
		D0	:	OTW
}   
#____________________________________________________END__________________________________________________________________
}

#PART A : Fualt测试 - t3_01~t3_19
    #注意 ：在disable的开关测试的时候，有以下两点需要特别注意：
	#	1.disable set了之后需要get
	#   2.在有fault产生的情况下disable相应的fault，此时判断寄存器0x1~0x4的值不能再用disable的设置，因为此时的disable不影响fault
#_________________________________________________________________________________________________________________________
{01 测试用例名称 : t3_01 basic mode switch 1
1.1 测试要点     : 
	测试基本的模式/状态跳转 : Idle <-----> Unpowered <-----> Standby，为了能够测试到上电过程中的现象，所以将上电时间增加了1000倍，
	上升1V要1ms左右
1.2 测试步骤     : 
	{
    1.2.1  拉低en_gate和wake信号，执行por_with_fault
	#测试平台有两个por的task，一个是不带有任何错误的por，一个类似正常的芯片，在上电的时候带有pvdd的uvlo等错误
	#1.2.1中为了测试上电之后的unpowered状态以及到standby的调准，所以执行por_with_fault，执行之后，会有fault
    1.2.2  等por下降沿之后，检测当前状态是否处于unpowered状态，同时查看nfault是否为低
	1.2.3  读寄存器0x1，应该有错误标记，读写寄存器0x5，看是否能读写正常
    1.2.3  等pvdd_uvlo1拉低之后，看当前状态是否依旧处于unpowered状态，同时查看nfault是否为高
    1.2.4  再次读写寄存器0x5，看是否能读写正常
	1.2.5  等pvdd_uvlo2拉低之后，看当前状态是否切换到IDLE状态，同时查看nfault是否为低
	1.2.6  此时既有fault又有warning，但是fault源已经撤销，使用clr flt将nfault清到high状态
	1.2.7  读寄存器0x1，应该没有错误标记[fault和warning都没有]
	1.2.7  等pvdd_uvfl拉低之后，查看当前状态是否保持IDLE状态，同时查看nfault是否为高
	1.2.8  读取寄存器0x1，寄存器的值保持有错误的标记
    1.2.9  再次读取寄存器0x1，寄存器的warning错误标记被上一个读寄存器0x1清除
	1.2.10 本项测试完成
	}
1.3 测试结果 :
	{
	2017-03-31 : 第1次测试通过
	2017-04-01 :  
	}
}
{02 测试用例名称 : t3_02 basic mode switch 2
2.1 测试要点     : 
	测试基本的模式/状态跳转 : Unpowered <-----> Standby <-----> Operating <-----> Idle
	#因为t3_01已经测试了idle到unpowered的transition，因此这里主要测试Unpowered到Operating，以及operating到Standby
2.2 测试步骤     : 
	{
    2.2.1 
	}
2.3 测试结果
	2017-04-06 : 基本的状态切换成功
}	
{03 测试用例名称 : t3_03 limp home or fail code operation
3.1 测试要点     : 
    芯片允许利用几个fault拥有的disable功能，在有错误的情况下依旧处于operating模式，保证motor继续运行
3.2 测试步骤     : 
	{
    3.2.1  执行芯片POR，将所有的fault输入设置为无效值[0]
	3.2.32 本项测试完成
	}
3.3 测试结果
	2017-xx-xx : "未测试"
}	
{04 测试用例名称 : t3_04 sleep mode 1 : sleep delay = 00
4.1 测试要点     : 
    测试sleep mode的基本特性 : 进入、退出,sleep delay设置为0，本测试主要测试sleep delay = 0时的sleep模式的进入
	并测试几个模式之间的正常的期望跳转
	standy <-----> sleep <-----> idle
	处于standby状态，en_gate和wake都为低，一旦芯片设置了进入sleep后，芯片会在设定的delay之后进入sleep模式
4.2 测试步骤     : 
	{
    4.2.1  执行por，将en_gate和wake信号都拉低
    4.2.2  等cfg_done之后，检查是否处于standby状态，并检查nfault信号是否拉高，gate driver是否关闭
    4.2.3  等待100ms的测试时间，然后开始standby到sleep模式的测试	
    4.2.4  设置sleep delay为0，然后将寄存器0x5~0x1到0xc写为全0，其中地址0xb不写[防止修改设定的sleep delay]，读寄存器，保证寄存器
	被正确的写入
	4.2.5  写寄存器0x9，发送sleep en
	4.2.6  等待sleep delay时间，sleep delay时间根据sleep的option来进行设定，在原设定的时间的基础上加2us
	4.2.7  检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	4.2.8  读取所有的寄存器，看是否恢复到default值
	4.2.9  等待100us，然后进行所有寄存器的读写操作，看是否读出的都是default值
	4.2.10 再次检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	4.2.11 测试en_gate对sleep模式没有影响 : en_gate拉高或者拉低，读出的sleep标记都是有效的
	4.2.12 测试低于设定的wake信号最低脉冲[osc_en生效时间]不能退出测试模式，目前设定osc_en拉高的delay为8us
	4.2.13 测试大于8us的wake高脉冲可以退出sleep模式，进入到standby模式
	4.2.14 本项测试完成
	}
4.3 测试结果
	2017-04-10 : 第一次测试完成，但是对于wake的相关测试可能后续需要补充
}	
{05 测试用例名称 : t3_05 sleep mode 2 : sleep delay = 01
5.1 测试要点     : 
    测试sleep mode的基本特性 : 进入、退出,sleep delay设置为10us，本测试主要测试sleep delay = 10us时的sleep模式的进入
	并测试几个模式之间的正常的期望跳转
	standy <-----> sleep <-----> idle
	处于standby状态，en_gate和wake都为低，一旦芯片设置了进入sleep后，芯片会在设定的delay之后进入sleep模式
5.2 测试步骤     : 
	{
    5.2.1  执行por，将en_gate和wake信号都拉低
    5.2.2  等cfg_done之后，检查是否处于standby状态，并检查nfault信号是否拉高，gate driver是否关闭
    5.2.3  等待100ms的测试时间，然后开始standby到sleep模式的测试	
    5.2.4  设置sleep delay为10us，然后将寄存器0x5~0x1到0xc写为全0，其中地址0xb不写[防止修改设定的sleep delay]，读寄存器，保证寄存器
	被正确的写入
	5.2.5  写寄存器0x9，发送sleep en
	5.2.6  等待sleep delay时间，sleep delay时间根据sleep的option来进行设定，在原设定的时间的基础上加2us
	5.2.7  检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	5.2.8  读取所有的寄存器，看是否恢复到default值
	5.2.9  等待100us，然后进行所有寄存器的读写操作，看是否读出的都是default值
	5.2.10 再次检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	5.2.11 测试en_gate对sleep模式没有影响 : en_gate拉高或者拉低，读出的sleep标记都是有效的
	5.2.12 测试低于设定的wake信号最低脉冲[osc_en生效时间]不能退出测试模式，目前设定osc_en拉高的delay为8us
	5.2.13 测试大于8us的wake高脉冲可以退出sleep模式，进入到standby模式
	5.2.14 本项测试完成
	}
4.3 测试结果
	2017-04-10 : 第一次测试完成，但是对于wake的相关测试可能后续需要补充
}	
{06 测试用例名称 : t3_06 sleep mode 3 : sleep delay = 10
6.1 测试要点     : 
    测试sleep mode的基本特性 : 进入、退出,sleep delay设置为50us，本测试主要测试sleep delay = 10us时的sleep模式的进入
	并测试几个模式之间的正常的期望跳转
	standy <-----> sleep <-----> idle
	处于standby状态，en_gate和wake都为低，一旦芯片设置了进入sleep后，芯片会在设定的delay之后进入sleep模式
6.2 测试步骤     : 
	{
    6.2.1  执行por，将en_gate和wake信号都拉低
    6.2.2  等cfg_done之后，检查是否处于standby状态，并检查nfault信号是否拉高，gate driver是否关闭
    6.2.3  等待100ms的测试时间，然后开始standby到sleep模式的测试	
    6.2.4  设置sleep delay为50us，然后将寄存器0x5~0x1到0xc写为全0，其中地址0xb不写[防止修改设定的sleep delay]，读寄存器，保证寄存器
	被正确的写入
	6.2.5  写寄存器0x9，发送sleep en
	6.2.6  等待sleep delay时间，sleep delay时间根据sleep的option来进行设定，在原设定的时间的基础上加2us
	6.2.7  检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	6.2.8  读取所有的寄存器，看是否恢复到default值
	6.2.9  等待100us，然后进行所有寄存器的读写操作，看是否读出的都是default值
	6.2.10 再次检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	6.2.11 测试en_gate对sleep模式没有影响 : en_gate拉高或者拉低，读出的sleep标记都是有效的
	6.2.12 测试低于设定的wake信号最低脉冲[osc_en生效时间]不能退出测试模式，目前设定osc_en拉高的delay为8us
	6.2.13 测试大于8us的wake高脉冲可以退出sleep模式，进入到standby模式
	6.2.14 本项测试完成
	}
6.3 测试结果
	2017-04-10 : 第一次测试完成，但是对于wake的相关测试可能后续需要补充
}
{07 测试用例名称 : t3_07 sleep mode 4 : sleep delay = 11
7.1 测试要点     : 
    测试sleep mode的基本特性 : 进入、退出,sleep delay设置为1ms，本测试主要测试sleep delay = 1ms时的sleep模式的进入
	并测试几个模式之间的正常的期望跳转
	standy <-----> sleep <-----> idle
	处于standby状态，en_gate和wake都为低，一旦芯片设置了进入sleep后，芯片会在设定的delay之后进入sleep模式
7.2 测试步骤     : 
	{
    7.2.1  执行por，将en_gate和wake信号都拉低
    7.2.2  等cfg_done之后，检查是否处于standby状态，并检查nfault信号是否拉高，gate driver是否关闭
    7.2.3  等待100ms的测试时间，然后开始standby到sleep模式的测试	
    7.2.4  设置sleep delay为1ms，然后将寄存器0x5~0x1到0xc写为全0，其中地址0xb不写[防止修改设定的sleep delay]，读寄存器，保证寄存器
	被正确的写入
	7.2.5  写寄存器0x9，发送sleep en
	7.2.6  等待sleep delay时间，sleep delay时间根据sleep的option来进行设定，在原设定的时间的基础上加2us
	7.2.7  检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	7.2.8  读取所有的寄存器，看是否恢复到default值
	7.2.9  等待100us，然后进行所有寄存器的读写操作，看是否读出的都是default值
	7.2.10 再次检查sleep标记是否有效 ： 状态机，sleep，sleep_dly以及osc_en信号都应该是处于sleep模式的状态
	7.2.11 测试en_gate对sleep模式没有影响 : en_gate拉高或者拉低，读出的sleep标记都是有效的
	7.2.12 测试低于设定的wake信号最低脉冲[osc_en生效时间]不能退出测试模式，目前设定osc_en拉高的delay为8us
	7.2.13 测试大于8us的wake高脉冲可以退出sleep模式，进入到standby模式
	7.2.14 本项测试完成
	}
7.3 测试结果
	2017-04-10 : 第一次测试完成，但是对于wake的相关测试可能后续需要补充
}
7.1 测试要点     : 
    测试基本的fault disable对fault的影响 : 	disable sns ocp fault[此disable会影响3个sns的ocp fault]
	#注意 ：
	#在disable sns ocp的时候，因为watch dog默认也是disable的，所以也要注意控制watch dog的disable，不能将之enable，否者影响测试
	#在产生fault的情况下，fault不能被disable功能清除，因此下面的测试步骤经过了修改，前一版本的disable会清除fault
	"----Error   : 1.在fault被disable的情况下可以清除fault还没有被测试，RTL还未修改，tc还未修改[20170327]"
	"----Success : 1."
7.2 测试步骤     : 
	{
    7.2.1  执行芯片POR，将所有的fault输入设置为无效值[0]
    7.2.2  执行寄存器的默认值读检测，保证寄存器处于default状态，将ostd的检测写成disable状态
    7.2.3  执行nfault的常拉高检测，开启gate driver的检测，检查寄存器0x1~0x4之后直接设置sns ocp的fault源[nfault信号不会拉低]	
    7.2.4  检查寄存器0x1~0x4上是否产生对应的fault标记
	7.2.5  等待50ms的时间用于nfault和gate_driver的检测
	7.2.6  再次检查寄存器0x1~0x4上是否产生对应的fault标记
	7.2.7  关闭nfault的常高检测，然后force gate driver的检测为0[因为接下来会产生fault]
	#下面的7.2.8为了证明在源存在情况下直接去掉disable，会自动产生fault
	7.2.8  使能sns ocp功能，检查在5个系统周期内是否有拉低nfault，拉低则说明产生了fault错误，没有检测到则说明此项测试出错，直接finish
	7.2.9  release前面的fault之后，主动开启gate driver检测使能，持续监控gate driver处于关闭状态、nfault保持低电平[检测间隔目前为10ns]
	7.2.10 对PWM输入持续送入激励，验证gate driver在此期间一直输出低电平
	7.2.11 然后读寄存器0x1~0x4上是否产生对应的fault标记[此时应该产生fault]
	7.2.12 等待50ms的时间用于nfault和gate_driver的检测
	7.2.13 在源不撤销的情况下重新disable sns ocp检测[认为在fault存在的情况下disable fault的检测，fault不能被clear]
	7.2.14 再次检查寄存器0x1~0x4上是否产生对应的fault标记[因为此时fault"不"会被disable清除，因此依旧会有fault标记]
	#上面的7.2.14~7.2.16证明了在fault源还在的情况下，fault不能被disable功能清除，但是当disable之后可以被清除动作清除
	7.2.15 在disable有效的情况下，clr_flt以及en_gate都可以清除fault ：包括标记，gate driver 以及nfault信号
	7.2.16 等待10ms的时间用于nfault和gate_driver的检测，然后都寄存器0x1~0x4，fault标记不变，然后再等10ms
	7.2.17 目前fault的功能处于disable状态，将之重新enable，并再次检查寄存器0x1~0x4上是否产生对应的fault标记[应该依旧有错误标记]
	7.2.18 等待10ms之后继续测试
	7.2.19 撤掉fault源，接下来测试在fault源撤销的情况下，disable功能是否能清除掉fault，经过测试DRV8305是不能清除
	7.2.20 等待10ms，再次读取0x1~0x4，错误标记依旧存在，然后disable sns ocp，等待5个周期之后检查fault标记
	7.2.21 等待10ms测试时间，然后尝试在nfault=0，fault源已经被撤销，fault功能被disable的情况下清除fault
	7.2.22 发送clr_flt，然后检测标记，证明能清除fault
	7.2.23 等待50ms，再检查一次0x1~0x4，没有任何错误
	7.2.24 将fault源改为sns b ocp，然后执行7.2.1~7.2.23	
	7.2.25 将fault源改为sns c ocp，然后执行7.2.1~7.2.23
	7.2.26 本项测试完成

	}
}	
{08 测试用例名称 : t3_08 sleep delay change 1 : 1ms -> xxx
8.1 测试要点     : 
    测试在sleep delay达到前通过写寄存器的方式将之修改，芯片会使用新修改的sleep delay值
	因为设置sleep delay的最短时间为16个周期，因此，从0us以及10us修改为其他值的情况不需要测试
	#在disable vreg uv的时候，因为watch dog默认也是disable的，所以也要注意控制watch dog的disable，不能将之enable，否者影响测试
	#在产生fault的情况下，fault不能被disable功能清除，因此下面的测试步骤经过了修改，前一版本的disable会清除fault
	#经过测试，disable对pwrgd的影响响应时间是172ns
8.2 测试步骤     : 
	{
    8.2.1  执行por，将en_gate和wake信号都拉低
    8.2.2  等cfg_done之后，检查是否处于standby状态，并检查nfault信号是否拉高，gate driver是否关闭
    8.2.3  等待100ms的测试时间，然后开始standby到sleep模式的测试	
    8.2.4  设置sleep delay为1ms，然后将寄存器0x5~0x1到0xc写为全0，其中地址0xb不写[防止修改设定的sleep delay]，读寄存器，保证寄存器
	被正确的写入
	8.2.5  写寄存器0x9，发送sleep en
	8.2.6  随机等待一段时间，此时间的范围为0~sleep_delay的90%延时内
	8.2.7  设置sleep delay为随机任意值，假设 ：
		8.2.7.1 sleep delay设置为11 ，则表示delay不变，等待后续的delay时间满后，判断芯片正常进入sleep模式
		8.2.7.2	sleep delay设置为非11值，则芯片会马上进入sleep模式[中间给予1us的缓冲时间]		
	8.2.8  保证8.2.7中的所有delay设置可以随机到[randc]，在重新设定sleep delay的时间点，保证有尽量多的随机值[100次随机]
	8.2.9  本项测试完成
	}
8.3 测试结果
	2017-04-10 : 第一次测试完成
}

{09 测试用例名称 : t3_09 
9.1 测试要点     : 
    根据datasheet的说明进行vds ocp disable的测试
	#注意 ：
	#在disable pvdd_uvlo_2的时候，因为watch dog默认也是disable的，所以也要注意控制watch dog的disable，不能将之enable，否者影响测试
	#在产生fault的情况下，fault不能被disable功能清除，因此下面的测试步骤经过了修改，前一版本的disable会清除fault
9.2 测试步骤     : 
	{
	}
}
{10 测试用例名称 : t3_10 
10.1 测试要点     : 
    测试其他没有在datasheet上注明的值哪些是disable
	#注意 ：
	#在disable pvdd_uvlo_2的时候，因为watch dog默认也是disable的，所以也要注意控制watch dog的disable，不能将之enable，否者影响测试
	#在产生fault的情况下，fault不能被disable功能清除，因此下面的测试步骤经过了修改，前一版本的disable会清除fault
10.2 测试步骤     : 
	{
	}
}
{11 测试用例名称 : t3_11 
11.1 测试要点     : 
    测试watch dog的基本功能 : 设置不同的watch dog delay对watch dog的fault进入时间有不同的影响
	#期间有一个随机的从watch dog fault生效到清除的一个随机事件，这个随机时间可以看到当小于56us时，pwrgd是否保持56us
	#测试CLEAR FLAUT对watch dog的清除
11.2 测试步骤     : 
	{
	11.2.1  执行por，并检查所有寄存器的初始值
	11.2.2  拉高en_gate，然后设置一些初始值
	11.2.3  设置watch dog delay的值[第一次循环为10ms]，并同时使能watch dog
	11.2.4  在watch dog delay时间没到之前，gate driver都是打开的
	11.2.5  在11.2.4开始执行的时候开始执行本行命令之后的命令 ：先读一下寄存器0x9，此时寄存器的值应该没有变化
	11.2.6  和11.2.5的读0x9同时开始nfault信号和pwrgd信号的检测 ：nfalut在watch dog delay满之后一定会拉低[watch dog delay*1.01]
	        pwrgd信号和nfault信号同时拉低，并且拉低至少56us，如果提前拉高，则错误，如果拉低超过60us，也错误
	11.2.7  和11.2.5以及11.2.6同时开始进行delay计时watch dog delay time的时间，此时应该还没有到watch dog的delay时间
	11.2.8  force掉gate driver的输出检测，然后等待nfault拉低
	11.2.9  开启gate driver的关闭检测，release掉前面的force，并把gate driver的输出检测打开
	11.2.10 开始nfault的常低检测
	11.2.11 读寄存器0x9，判断寄存器的值，此时watch的delay没有改变，但是watch dog en则被拉低
	11.2.12 读寄存器0x1~0x4，然后停止nfault的常低检测，准备清除watch dog
	11.2.13 读写寄存器0x9，用clr_flt来清除watch dog，接下来watch dog的fault会被清除，pwrgd保持高，nfault拉高，gate driver会开启
	11.2.14 做好gate driver从关闭到开启的检测措施，然后开始检查nfault的常高，然后判断pwrgd是否是高[目前pwrgd检测是加在nfault]
	11.2.15 等待10ms
	11.2.16 将watch dog delay时间设置为20ms，50ms，100ms后，分别执行11.2.3~11.2.15
	11.2.17 循环执行以上步骤32次，增加清除watch dog时间的随机性
	11.2.18 本项测试完成
	}
11.3 测试结果
	2017-03-28 : 出现了gate driver检测的问题[竞争?]，暂时将pwm的最小占空比调到了1，后面再解决这个问题
}
{12 测试用例名称 : t3_12 
12.1 测试要点     : 
    测试watch dog的基本功能 : 设置不同的watch dog delay对watch dog的fault进入时间有不同的影响
	#期间有一个随机的从watch dog fault生效到清除的一个随机事件，这个随机时间可以看到当小于56us时，pwrgd是否保持56us
	#测试en_gate对watch dog的清除
12.2 测试步骤     : 
	{
	12.2.1  执行por，并检查所有寄存器的初始值
	12.2.2  拉高en_gate，然后设置一些初始值
	12.2.3  设置watch dog delay的值[第一次循环为10ms]，并同时使能watch dog
	12.2.4  在watch dog delay时间没到之前，gate driver都是打开的
	12.2.5  在12.2.4开始执行的时候开始执行本行命令之后的命令 ：先读一下寄存器0x9，此时寄存器的值应该没有变化
	12.2.6  和12.2.5的读0x9同时开始nfault信号和pwrgd信号的检测 ：nfalut在watch dog delay满之后一定会拉低[watch dog delay*1.01]
	        pwrgd信号和nfault信号同时拉低，并且拉低至少56us，如果提前拉高，则错误，如果拉低超过60us，也错误
	12.2.7  和12.2.5以及12.2.6同时开始进行delay计时watch dog delay time的时间，此时应该还没有到watch dog的delay时间
	12.2.8  force掉gate driver的输出检测，然后等待nfault拉低
	12.2.9  开启gate driver的关闭检测，release掉前面的force，并把gate driver的输出检测打开
	12.2.10 开始nfault的常低检测
	12.2.11 读寄存器0x9，判断寄存器的值，此时watch的delay没有改变，但是watch dog en则被拉低
	12.2.12 读寄存器0x1~0x4，然后停止nfault的常低检测，准备清除watch dog
	12.2.13 读写寄存器0x9，用en_gate低脉冲来清除watch dog，接下来watch dog的fault会被清除，pwrgd保持高，nfault拉高，gate driver会开启
	12.2.14 做好gate driver从关闭到开启的检测措施，然后开始检查nfault的常高，然后判断pwrgd是否是高[目前pwrgd检测是加在nfault]
	12.2.15 等待10ms
	12.2.16 将watch dog delay时间设置为20ms，50ms，100ms后，分别执行12.2.3~12.2.15
	12.2.17 循环执行以上步骤32次，增加清除watch dog时间的随机性
	12.2.18 本项测试完成
	}
12.3 测试结果
	2017-03-28 : 出现了gate driver检测的问题[竞争?]，暂时将pwm的最小占空比调到了1，后面再解决这个问题
}
{13 测试用例名称 : t3_13 
13.1 测试要点     : 
    测试watch dog的基本功能 : 设置不同的watch dog delay对watch dog的fault进入时间有不同的影响
	#期间有一个随机的从watch dog fault生效到清除的一个随机事件，这个随机时间可以看到当小于56us时，pwrgd是否保持56us
	#测试在watch dog delay时间内连续读地址0x1，则不会watch dog fault生效，一旦停止，则会watch dog生效
	#测试当watch生效后，读0x1不会再清除watch dog fault
	#测试watch dog的delay随机
13.2 测试步骤     : 
	{
	13.2.1  执行por，并检查所有寄存器的初始值
	13.2.2  拉高en_gate，然后设置一些初始值
	13.2.3  设置watch dog delay的值，delay值的顺序随机生成，并同时使能watch dog
	13.2.4  在watch dog delay时间没到之前，gate driver都是打开的，这个时候读寄存器0x1，则watch dog一直不会生效，总共执行30个watch dog delay时间
	13.2.5  在13.2.4开始执行的时候同时开始gate driver的检测，并且一直检测nfault和pwrgd都不会拉低
	13.2.6  前面连续读0x1 30个watch dog delay时间后，关闭gate driver的检测，因为接下来gate driver可能会在某个时间关闭，很难提前判断gate driver会关闭，
	        因此提前关闭检测，关闭pwrgd的检测
	13.2.7  等nfault拉低，然后开始gate driver的关闭检测，同时开始检测pwrgd信号[拉低56us]
	13.2.8  读几次寄存器0x1，并不需要判断值，直接13.2.7中的检测有没有受影响即可
	13.2.9  使用clear fault来清除watch dog产生的fault
	13.2.10 检查一下gate driver是否打开，nfault是否拉高，pwrgd是否为高
	13.2.11 停止gate driver的输入
	13.2.12 重新随机选择watch dog delay，然后执行13.2.3~13.2.11 执行次数为32次
	13.2.13 本项测试完成
	}
13.3 测试结果
	2017-03-28 : 暂时将pwm的最小占空比调到了1，后面再解决这个问题，除了这个问题外本case pass
	
}

#____________________________________________________END__________________________________________________________________



#下面是测试记录等附加信息
{99	测试记录 : 用于基本的测试记录管理
99.1 未测试Feature记录
	{
	99.1.1 vds ocp的因为还需要进行进一步的仔细测试，所以还没有进行tesecase的编写，主要是经过芯片测试出来没有report only模式
	99.1.2 

	}	
	
99.2 测试出的问题记录	
	{
	#注意 ：
	#	每一个question都有一个对应的answer，是测试现象以及一些对应的解决方案等，如果没有解决或者解释，则用xxx表示	
	2017.03.29 
		Q1 : unpowered system模式的特点？
		A1 : 能读写寄存器，但是寄存器不能生效?至少就sleep而言，在unpowered下并不能进入sleep，还需要仔细测试下watch dog
		A2 : 测试出在unpowered system使能watch dog可以生效，而不能进入sleep模式
		#----#
		Q2 : 设置sleep delay为0，进sleep模式，需要至少拉低wake 9us，退出sleep，也需要拉高至少wake 9us，因此，进入退出一次sleep，
		至少有20us左右
	2017.04.10
		Q1 : 关于wake和sleep模式，目前经过测试，在退出测试模式时，需要至少拉高6us才能退出测试模式，那么，需要测试一下在用wake进入
		测试模式的时候，是够需要wake拉低多长时间才能进入测试模式，目前的设计是只要wake信号能被系统时钟采到就能进入，也就是进入的
		时候只需要保证拉低1个时钟的wake即可进入
		A1 : 需要对以上问题进行测试，如果是拉低很短的时间就可以进入测试模式，则和我们目前的设计保持一致，如果也需要几个us，那么我们
		目前的设计就和DRV8305不一致
		
		Q2 :
		A2 :
	}	
99.3 	
	
	



}


#--------------------------------------------------------------------------------------------------------------------------